// Simple script to test /wingo/my-bets endpoint with a hardcoded JWT token
import http from 'http';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: '.env' });

const PORT = process.env.PORT || 10000;
const BASE_URL = `http://localhost:${PORT}`;

// Hardcoded JWT token for testing (replace with a valid token from your system)
// This should be a token generated by your auth system for a valid user
const TEST_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbklkIjoxLCJ1c2VybmFtZSI6ImFkbWluIiwiaXNBZG1pbiI6dHJ1ZSwiaWF0IjoxNzU1MTc2NDY0LCJleHAiOjE3NTUyNjI4NjR9.Kt2mO-UgqCKthRRvTJRz1hS7X7RBae5Zk3bY08bR9Ow';

// Helper function to log with timestamps
const log = (...args) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}]`, ...args);
};

// Function to test /wingo/my-bets endpoint
function testMyBetsEndpoint(token) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: PORT,
      path: '/api/wingo/my-bets?limit=10',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    };

    log(`\nüåê Making request to: ${BASE_URL}${options.path}`);
    log(`üîë Using token: ${token ? `${token.substring(0, 10)}...` : 'None'}`);

    const req = http.request(options, (res) => {
      let data = [];
      
      res.on('data', (chunk) => {
        data.push(chunk);
      });

      res.on('end', () => {
        const response = Buffer.concat(data).toString();
        log(`\n=== RESPONSE (${res.statusCode} ${res.statusMessage}) ===`);
        log('Headers:', JSON.stringify(res.headers, null, 2));
        
        try {
          const json = JSON.parse(response);
          log('JSON Response:');
          console.log(JSON.stringify(json, null, 2));
          resolve(json);
        } catch (e) {
          log('Raw Response:');
          console.log(response);
          resolve(response);
        }
      });
    });

    req.on('error', (error) => {
      log('‚ùå Request failed:', error);
      reject(error);
    });

    req.end();
  });
}

// Main function
async function main() {
  try {
    if (!TEST_TOKEN || TEST_TOKEN === 'YOUR_TEST_TOKEN_HERE') {
      log('‚ùå Please set a valid JWT token in the TEST_TOKEN constant');
      log('You can get a token by logging in through the frontend and checking localStorage');
      process.exit(1);
    }
    
    // Test the endpoint with the token
    await testMyBetsEndpoint(TEST_TOKEN);
    
  } catch (error) {
    log('‚ùå Test failed:', error);
    process.exit(1);
  } finally {
    process.exit(0);
  }
}

// Run the main function
main();
