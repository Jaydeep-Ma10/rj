generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ManualDeposit {
  id              Int       @id @default(autoincrement())
  name            String
  mobile          String
  amount          Float
  utr             String
  method          String?
  slipUrl         String?
  verified        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  status          String    @default("pending")
  userId          Int?
  approvedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?
  metadata        Json?
  user            User?     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  mobile         String          @unique
  balance        Float           @default(0)
  createdAt      DateTime        @default(now())
  password       String
  referralCode   String?         @unique
  referredBy     String?
  isDemoUser     Boolean         @default(false)
  auditLogs      AuditLog[]
  fileUploads    FileUpload[]
  kycDocuments   KycDocument[]
  manualDeposits ManualDeposit[]
  passwordResets PasswordReset[]
  userActivities UserActivity[]
  wingoBets      WingoBet[]

  @@index([mobile])
  @@index([isDemoUser])
}

model WingoRound {
  id           Int        @id @default(autoincrement())
  period       String     @unique
  interval     String
  startTime    DateTime
  endTime      DateTime
  status       String     @default("pending")
  resultNumber Int?
  resultAt     DateTime?
  serialNumber Int?
  bets         WingoBet[]

  @@index([period])
  @@index([interval])
  @@index([serialNumber])
}

model WingoRoundAnalytics {
  id          Int      @id @default(autoincrement())
  roundId     Int      @unique
  totalBets   Float
  totalPayout Float
  profit      Float
  createdAt   DateTime @default(now())
}

model WingoBet {
  id              Int       @id @default(autoincrement())
  userId          Int
  roundId         Int
  type            String
  value           String
  amount          Float
  multiplier      Int       @default(1)
  win             Boolean?
  payout          Float?
  status          String    @default("pending")
  idempotencyKey  String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
  round           WingoRound @relation(fields: [roundId], references: [id])

  @@unique([userId, roundId, type, value], name: "unique_bet_per_round")
  @@index([userId])
  @@index([roundId])
  @@index([idempotencyKey])
}

model Admin {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  createdAt DateTime  @default(now())
  lastLogin DateTime?
}

model ManualWithdraw {
  id            Int      @id @default(autoincrement())
  name          String
  mobile        String
  amount        Float
  status        String   @default("pending")
  userId        Int?
  createdAt     DateTime @default(now())
  accountHolder String?
  accountNumber String?
  ifsc          String?
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  mobile    String
  otp       String
  isUsed    Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([mobile])
  @@index([otp])
  @@index([expiresAt])
}

model FileUpload {
  id           Int           @id @default(autoincrement())
  filename     String
  originalName String
  mimeType     String
  size         Int
  s3Key        String        @unique
  s3Bucket     String
  s3Url        String
  uploadedBy   Int?
  category     String
  status       String        @default("active")
  metadata     Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User?         @relation(fields: [uploadedBy], references: [id])
  kycDocuments KycDocument[]

  @@index([uploadedBy])
  @@index([category])
  @@index([status])
  @@index([createdAt])
}

model AuditLog {
  id           Int      @id @default(autoincrement())
  userId       Int?
  action       String
  resource     String
  resourceId   String?
  details      Json?
  ipAddress    String?
  userAgent    String?
  success      Boolean  @default(true)
  errorMessage String?
  createdAt    DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([success])
}

model KycDocument {
  id              Int         @id @default(autoincrement())
  userId          Int
  documentType    String
  fileUploadId    Int?
  status          String      @default("pending")
  reviewedBy      Int?
  reviewedAt      DateTime?
  rejectionReason String?
  metadata        Json?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  fileUpload      FileUpload? @relation(fields: [fileUploadId], references: [id])
  user            User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([documentType])
  @@index([status])
  @@index([createdAt])
}

model UserActivity {
  id           Int      @id @default(autoincrement())
  userId       Int
  activityType String
  details      Json?
  ipAddress    String?
  userAgent    String?
  sessionId    String?
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([activityType])
  @@index([createdAt])
  @@index([sessionId])
}
